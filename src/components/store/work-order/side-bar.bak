'use client';

import { useFormContext } from 'react-hook-form';

import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
} from '@/components/ui/form';
import { Separator } from '@/components/ui/separator';
import { formatCurrency } from '@/lib/utils';
import { WorkOrderSchemaType } from '@/types/work';

// @ts-nocheck

// Todo. payment 공통 컴포넌트 사용
export default function SideBar() {
  const {
    control,
    formState: { isValid, isSubmitting },
    getValues,
  } = useFormContext<WorkOrderSchemaType>();

  const options = getValues('options');
  const { checked, count } = getValues('additional');
  const totalOptionPrice = options.reduce(
    (acc, { optionPrice, optionQuantity }) =>
      (acc += optionPrice * optionQuantity),
    0
  );
  const additionalFee = checked ? count * 1000 : 0;
  const totalPrice = additionalFee + totalOptionPrice;

  return (
    <div className="w-[410px] sticky top-[100px] h-fit flex flex-col gap-[20px]">
      <div className="border border-slate-200 p-[30px] rounded-[4px] ">
        <h2>결제금액</h2>
        <Separator className="my-[30px]" />

        <div className="flx flex-col gap-[10px] [&>*]:flex [&>*]:justify-between [&>*]:items-center">
          <div>
            <span className="typo-body-16-regular-150">총 상품 금액</span>
            <span className="typo-body-16-medium-100-tight">
              {formatCurrency(totalOptionPrice)}원
            </span>
          </div>
          <div>
            <span className="typo-body-16-regular-150">결제 금액 추가</span>
            <span className="typo-body-16-medium-100-tight text-pink-500">
              + {formatCurrency(additionalFee)}원
            </span>
          </div>
          <div>
            <h2>총 결제 금액</h2>
            <span className="text-pink-500 typo-title-32-bold-150">
              {formatCurrency(totalOptionPrice + additionalFee)}원
            </span>
          </div>
        </div>

        <Separator className="my-[20px]" />

        <FormField
          control={control}
          name="agreement"
          render={({ field }) => (
            <FormItem className="flex gap-[10px] items-center mb-[20px]">
              <FormControl ref={field.ref}>
                <Checkbox
                  checked={field.value}
                  onCheckedChange={field.onChange}
                />
              </FormControl>
              <FormLabel className="typo-body-16-medium-100-tight">
                아래 내용에 모두 동의합니다.
              </FormLabel>
            </FormItem>
          )}
        />

        <FormField
          control={control}
          name="agreement"
          render={({ field }) => (
            <FormItem className="flex gap-[10px] items-center mb-[16px]">
              <FormControl ref={field.ref}>
                <Checkbox
                  checked={field.value}
                  onCheckedChange={field.onChange}
                />
              </FormControl>
              <FormLabel className="typo-body-14-medium-100-tight text-text-sub">
                개인정보 수집 이용 및 제 3자 제공 동의 (필수)
              </FormLabel>
            </FormItem>
          )}
        />

        <div className="typo-body-14-regular-150-tight mb-[10px] text-text-sub">
          본인은 만 14세 이상이며, 주문 내용을 확인하였습니다.
        </div>
        <p className="typo-body-14-regular-150-tight text-text-sub">
          프리디어(아트디어)는 통신판매중개자로 거래 당사자가 아니므로, 판매자가
          등록한 상품정보 및 거래 등에 대해 책임을 지지 않습니다. (단,
          프리디어(아트디어)가 판매자로 등록 판매한 상품은 판매자로서 책임을
          부담합니다.)
        </p>
      </div>
      <Button
        variant="accent"
        size="lg"
        className="w-full"
        type="submit"
        disabled={!isValid || isSubmitting}
      >
        {formatCurrency(totalPrice)}원 결제하기
      </Button>
    </div>
  );
}
